/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "zmk-helpers/helper.h"
#include "includes/cornix54.h"

// tap windows for ctl alt and gui

#define HM_TAPPING_TERM 250
#define HM_TAPPING_REPEAT 210

// quick tapping for shift

#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 70
#define BASE 0
#define WIN 1
#define LOWER 2
#define RAISE 3
#define ADJUST 4
#define NAVI   5
#define NUM    6
#define DEBUG  7

// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH1 LH0 RH0 RH1
#define KEYS_T LH1 LH0 RH0 RH1
#define ZMK_POINTING_DEFAULT_SCRL_VAL 15

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <180>;
    quick-tap-ms = <150>;
    flavor = "balanced";
};

/ {
    // Activate ADJUST layer by pressing raise and lower

    behaviors {
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <150>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };

        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.

        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            //flavor = "balanced";

            flavor = "balanced";
            tapping-term-ms = <180>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <180>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;

            // for quick tapping; shift+~

            hold-trigger-on-release;
        };

        /*
         * Non-Positional Homerow Mods
         * Used for &mm_grescm_gui behavior on left hand.
         *
         * Usage: &hm LSHFT T
         * Tap: T
         * Tap-Tap-Hold: Repeat T
         * Hold: LSHIFT
         */

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        cb_enter {
            bindings = <&kp RET>;
            key-positions = <28 29>;
            layers = <0 1>;
        };

        Main {
            bindings = <&to 0>;
            key-positions = <4 3 2>;
            timeout-ms = <200>;
        };

        MVEdit {
            bindings = <&to 3>;
            key-positions = <15 16 14>;
            timeout-ms = <200>;
        };

        combo_ng_on {
            timeout-ms = <300>;
            key-positions = <18 19>;
            bindings = <&ng_on>;
            layers = <0>;
        };

        combo_ng_off {
            timeout-ms = <300>;
            key-positions = <17 16>;
            bindings = <&ng_off>;
            layers = <0 6>;
        };

        n_ga {
            bindings = <&n_ga>;
            key-positions = <16 19>;
            layers = <6>;
            timeout-ms = <180>;
        };

        n_gi {
            bindings = <&n_gi>;
            key-positions = <19 2>;
            timeout-ms = <180>;
            layers = <6>;
        };

        n_gu {
            bindings = <&n_gu>;
            key-positions = <16 19>;
            timeout-ms = <180>;
            layers = <6>;
        };

        n_ge {
            bindings = <&n_ge>;
            key-positions = <14 19>;
            timeout-ms = <180>;
            layers = <6>;
        };

        n_go {
            bindings = <&n_go>;
            key-positions = <28 19>;
            timeout-ms = <180>;
            layers = <6>;
        };

        n_za {
            bindings = <&n_za>;
            key-positions = <16 7>;
            timeout-ms = <180>;
            layers = <6>;
        };

        n_ji {
            bindings = <&n_ji>;
            key-positions = <4 19>;
            timeout-ms = <180>;
            layers = <6>;
        };

        n_zu {
            bindings = <&n_zu>;
            key-positions = <16 9>;
            timeout-ms = <180>;
            layers = <6>;
        };

        n_ze {
            bindings = <&n_ze>;
            key-positions = <13 19>;
            timeout-ms = <180>;
            layers = <6>;
        };

        n_zo {
            bindings = <&n_zo>;
            key-positions = <29 19>;
            timeout-ms = <180>;
            layers = <6>;
        };

        n_da {
            bindings = <&n_da>;
            key-positions = <32 16>;
            layers = <6>;
            timeout-ms = <180>;
        };

        n_di {
            bindings = <&n_di>;
            key-positions = <19 17>;
            timeout-ms = <180>;
            layers = <6>;
        };

        n_du {
            bindings = <&n_di>;
            key-positions = <16 21>;
            timeout-ms = <180>;
            layers = <6>;
        };

        n_de {
            bindings = <&n_de>;
            key-positions = <3 19>;
            timeout-ms = <180>;
            layers = <6>;
        };

        n_do {
            bindings = <&n_do>;
            key-positions = <19 15>;
            timeout-ms = <180>;
            layers = <6>;
        };
    };

    macros {
        Naginata: Naginata {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp INT_KANA>, <&macro_wait_time 20>, <&to 6>;

            label = "NAGINATA";
        };

        KanaToLY0: KanaToLY0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp INT2>, <&macro_wait_time 20>, <&to 0>;

            label = "KANATOLY0";
        };

        // 2025/10/19 Naginata Added

        ng_on: ng_on {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LANGUAGE_1 &kp INTERNATIONAL_4 &to 6>;
        };

        ng_off: ng_off {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LANGUAGE_2 &kp INTERNATIONAL_5 &to 0>;
        };

        n_ga: n_ga {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp LEFT_BRACKET>;
            label = "N_GA";
        };

        n_gi: n_gi {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp LEFT_BRACKET>;
            label = "N_GI";
        };

        n_gu: n_gu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H &kp LEFT_BRACKET>;
            label = "N_GU";
        };

        n_ge: n_ge {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SEMI &kp LEFT_BRACKET>;
            label = "N_GE";
        };

        n_go: n_go {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp B &kp LEFT_BRACKET>;
            label = "N_GO";
        };

        n_za: n_za {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp X &kp LEFT_BRACKET>;
            label = "N_ZA";
        };

        n_ji: n_ji {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp D &kp LEFT_BRACKET>;
            label = "N_JI";
        };

        n_zu: n_zu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp LEFT_BRACKET>;
            label = "N_ZU";
        };

        n_ze: n_ze {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P &kp LEFT_BRACKET>;
            label = "N_ZE";
        };

        n_zo: n_zo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp LEFT_BRACKET>;
            label = "N_ZO";
        };

        n_da: n_da {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Q &kp LEFT_BRACKET>;
            label = "N_DA";
        };

        n_di: n_di {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp LEFT_BRACKET>;
            label = "N_DI";
        };

        n_du: n_du {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Z &kp LEFT_BRACKET>;
            label = "N_DU";
        };

        n_de: n_de {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp W &kp LEFT_BRACKET>;
            label = "N_DE";
        };

        n_do: n_do {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp LEFT_BRACKET>;
            label = "N_DO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Main {
            display-name = "Main";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp TAB    &kp Q         &kp W         &kp E          &kp R  &kp T                           &kp Y        &kp U      &kp I                    &kp O     &kp P      &kp LEFT_BRACKET
&kp CAPS   &kp A         &kp S         &hm_l LSHFT D  &kp F  &kp G                           &kp H        &kp J      &hm_r RSHFT K            &kp L     &kp SEMI   &kp SQT
&kp LSHFT  &kp Z         &kp X         &kp C          &kp V  &kp B        &none  &kp C_MUTE  &kp N        &kp M      &kp COMMA                &kp DOT   &kp FSLH   &kp INT_RO
&kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &mo 2          &mo 1  &lt 4 SPACE                     &lt 5 ENTER  &kp SPACE  &hm_r RIGHT_SHIFT GRAVE  &kp LEFT  &Naginata  &kp RIGHT
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Second {
            display-name = "Second";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&trans  &kp NUMBER_1      &kp NUMBER_2      &kp NUMBER_3      &kp NUMBER_4      &kp NUMBER_5                      &kp NUMBER_6           &kp NUMBER_7       &kp NUMBER_8      &kp NUMBER_9      &kp NUMBER_0      &kp RIGHT_BRACKET
&trans  &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(NUMBER_5)                  &kp RS(NUMBER_6)       &kp RS(NUMBER_7)   &kp RS(NUMBER_8)  &kp RS(NUMBER_9)  &kp RS(NUMBER_0)  &kp NUHS
&trans  &none             &none             &kp F7            &kp F9            &trans            &trans  &trans  &kp LS(RIGHT_BRACKET)  &kp LS(BACKSLASH)  &kp MINUS         &kp EQUAL         &kp INT3          &none
&none   &none             &none             &none             &trans            &trans                            &kp BACKSPACE          &kp DEL            &kp INT_MUHENKAN  &none             &none             &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        Function {
            display-name = "Function";

            // TODO: Some binds are waiting for shifted keycode support.
            // -------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |  F12  |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&kp ESC  &none    &kp F2     &kp F3      &kp F4     &kp F5                         &kp PAGE_UP       &kp HOME      &kp UP_ARROW      &kp END    &none      &none
&trans   &kp F6   &kp F7     &kp F8      &kp F9     &kp F10                        &kp PAGE_DOWN     &kp LEFT      &kp DOWN          &kp RIGHT  &kp ENTER  &none
&trans   &kp F11  &kp F12    &kp LA(F4)  &kp LC(Z)  &kp LS(LG(S))  &trans  &trans  &kp INT_MUHENKAN  &kp INT_KANA  &kp BACKSPACE     &kp DEL    &none      &none
&trans   &none    &kp LG(E)  &none       &trans     &trans                         &none             &trans        &kp INT_MUHENKAN  &none      &none      &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        MVEdit {
            display-name = "MVEdit";

            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
            // |       | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       |
            // |       | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
            // |       | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
            //                |      |       |       |      |      |  |      |      |      |       |      |

            bindings = <
&kp LS(ESC)    &none       &kp HOME      &kp BACKSPACE  &kp END       &kp LC(Z)                  &none  &none  &none       &none  &none  &none
&kp ENTER      &kp LC(R)   &kp UP_ARROW  &kp LC(B)      &kp DOWN      &kp LS(Z)                  &none  &none  &none       &none  &none  &none
&kp LSHFT      &none       &kp LC(H)     &kp C          &kp LC(C)     &kp LC(V)  &trans  &trans  &none  &none  &none       &none  &none  &none
&kp BACKSPACE  &kp DELETE  &none         &kp LCTRL      &kp LEFT_ALT  &kp SPACE                  &none  &none  &KanaToLY0  &none  &none  &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        Mouse {
            display-name = "Mouse";

            // ----------------------------------------------------------------------------------------------------------------------------
            // | BTCLR  |  BT1    |  BT2    |   BT3   |   BT4   |   BT5   |                  |      |      |       |      |       |       |
            // | moDEBUG| RGB_HUD | RGB_HUI | RGB_SAD | RGB_SAI | RGB_EFF |                  |      |      |       |      |       |       |
            // | EXTPWR | RGB_BRD | RGB_BRI |         |         |         |                  |      |      |       |      |       |       |
            // |        |         |         |         |         |         | RGB_TOG | |      |      |      |       |      |       |       |
            //                    |         |         |         |         |         | |      |      |      |       |      |

            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none  &bt BT_CLR                      &none  &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &none  &none
&none  &none         &none         &kp ESC       &none  &bt BT_CLR_ALL                  &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none  &none
&none  &none         &none         &none         &none  &none           &trans  &trans  &none  &none           &mkp MCLK       &none            &none  &none
&none  &none         &none         &none         &none  &none                           &none  &none           &kp N4          &none            &none  &none
            >;
        };

        KeyPad {
            display-name = "KeyPad";
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none   &bt BT_CLR                  &kp KP_PLUS   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MULTIPLY  &none
&none  &none         &none         &none         &none   &none                       &kp KP_MINUS  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_DIVIDE    &none
&none  &none         &none         &none         &none   &none       &trans  &trans  &kp KP_N0     &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_DOT       &none
&none  &none         &none         &mo 0         &trans  &trans                      &none         &none            &none            &kp LC(LA(B))    &none            &none
            >;
        };

        Nagi1 {
            bindings = <
&kp TAB         &none         &kp G         &kp W  &kp D  &kp LEFT                  &kp RIGHT  &kp BACKSPACE  &kp DOT  &kp R         &kp EQUAL  &kp DELETE
&kp CAPSLOCK    &kp INT1      &kp SQT       &kp S  &kp T  &kp LS(Z)                 &kp H      &kp N3         &kp E    &kp NUMBER_4  &kp INT3   &kp LEFT_BRACKET
&kp LEFT_SHIFT  &kp MINUS     &kp V         &kp F  &kp B  &kp C      &none  &trans  &kp Q      &kp U          &kp Y    &kp O         &kp SEMI   &kp RIGHT_BRACKET
&kp LCTRL       &kp LEFT_GUI  &kp LEFT_ALT  &mo 2  &mo 7  &kp SPACE                 &kp ENTER  &lt 7 SPACE    &none    &kp LEFT      &to 0      &kp RIGHT
            >;
        };

        Nagi2 {
            bindings = <
&trans  &trans  &kp Q   &kp L       &kp FSLH       &kp LEFT_ARROW                  &kp RIGHT     &kp X        &kp N9     &kp N5  &kp N8        &trans
&trans  &kp P   &kp N   &kp I       &kp J          &kp A                           &kp N7        &kp K        &kp M      &kp Z   &kp NUMBER_2  &trans
&trans  &trans  &trans  &kp RS(N0)  &kp LS(COMMA)  &kp NUHS        &trans  &trans  &kp NUMBER_6  &kp RS(DOT)  &kp COMMA  &kp N0  &trans        &trans
&trans  &trans  &trans  &trans      &trans         &trans                          &trans        &trans       &trans     &trans  &trans        &trans
            >;
        };
    };
};
